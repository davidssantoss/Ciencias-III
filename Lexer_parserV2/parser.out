Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS term
Rule 2     expression -> expression MINUS term
Rule 3     expression -> term
Rule 4     term -> term TIMES factor
Rule 5     term -> term DIVIDE factor
Rule 6     term -> factor
Rule 7     factor -> NUMBER
Rule 8     factor -> expression

Terminals, with rules where they appear

DIVIDE               : 5
MINUS                : 2
NUMBER               : 7
PLUS                 : 1
TIMES                : 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 8 0
factor               : 4 5 6
term                 : 1 2 3 4 5

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS term
    (2) expression -> . expression MINUS term
    (3) expression -> . term
    (4) term -> . term TIMES factor
    (5) term -> . term DIVIDE factor
    (6) term -> . factor
    (7) factor -> . NUMBER
    (8) factor -> . expression

    NUMBER          shift and go to state 2

    term                           shift and go to state 1
    expression                     shift and go to state 4
    factor                         shift and go to state 3

state 1

    (3) expression -> term .
    (4) term -> term . TIMES factor
    (5) term -> term . DIVIDE factor

  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    PLUS            reduce using rule 3 (expression -> term .)
    MINUS           reduce using rule 3 (expression -> term .)
    $end            reduce using rule 3 (expression -> term .)
    TIMES           shift and go to state 6
    DIVIDE          shift and go to state 5

  ! TIMES           [ reduce using rule 3 (expression -> term .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> term .) ]


state 2

    (7) factor -> NUMBER .

    PLUS            reduce using rule 7 (factor -> NUMBER .)
    MINUS           reduce using rule 7 (factor -> NUMBER .)
    $end            reduce using rule 7 (factor -> NUMBER .)
    TIMES           reduce using rule 7 (factor -> NUMBER .)
    DIVIDE          reduce using rule 7 (factor -> NUMBER .)


state 3

    (6) term -> factor .

    PLUS            reduce using rule 6 (term -> factor .)
    MINUS           reduce using rule 6 (term -> factor .)
    $end            reduce using rule 6 (term -> factor .)
    TIMES           reduce using rule 6 (term -> factor .)
    DIVIDE          reduce using rule 6 (term -> factor .)


state 4

    (0) S' -> expression .
    (1) expression -> expression . PLUS term
    (2) expression -> expression . MINUS term
    (8) factor -> expression .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
